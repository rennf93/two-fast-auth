{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Two-Fast-Auth","text":"<p><code>two-fast-auth</code> is a FastAPI middleware for simplified 2FA implementation. It integrates seamlessly with FastAPI to offer robust protection against various security threats, ensuring your application remains secure and reliable.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>QR Code Generation</li> <li>TOTP Verification</li> <li>Recovery Codes Generation</li> <li>Optional Secret Encryption</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":"<pre><code>from fastapi import FastAPI\nfrom two_fast_auth import TwoFactorMiddleware\n\napp = FastAPI()\n\n# Without encryption:\napp.add_middleware(\n    TwoFactorMiddleware,\n    get_user_secret_callback=lambda uid: \"secret\",  # Plaintext secret\n    excluded_paths=[\"/docs\"]\n)\n\n# With encryption:\napp.add_middleware(\n    TwoFactorMiddleware,\n    get_user_secret_callback=lambda uid: \"encrypted_secret\",\n    encryption_key=\"your-32-url-safe-base64-key\",\n    excluded_paths=[\"/docs\"]\n)\n</code></pre>"},{"location":"#documentation","title":"Documentation","text":"<ul> <li>Installation</li> <li>First Steps</li> <li>Example Application</li> <li>Encryption Example Application</li> <li>Standard Implementation</li> <li>Encryption Implementation</li> <li>Encryption Guide</li> <li>TwoFactorAuth Class</li> <li>TwoFactorMiddleware Class</li> </ul>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#requirements","title":"Requirements","text":"<ul> <li>Python 3.10+</li> <li>cryptography (required for secret encryption)</li> <li>FastAPI</li> <li>pyotp</li> <li>qrcode</li> <li>Pillow</li> </ul>"},{"location":"installation/#install","title":"Install","text":"<pre><code>pip install two-fast-auth\n</code></pre>"},{"location":"installation/#verify-installation","title":"Verify Installation","text":"<pre><code>import two_fast_auth\nprint(two_fast_auth.__version__)\n</code></pre>"},{"location":"installation/#configuration","title":"Configuration","text":"<pre><code>from two_fast_auth import TwoFactorMiddleware\n\n# Without encryption\napp.add_middleware(\n    TwoFactorMiddleware,\n    get_user_secret_callback=lambda uid: \"user_secret\",\n    header_name=\"X-2FA-Token\"\n)\n\n# With encryption\napp.add_middleware(\n    TwoFactorMiddleware,\n    get_user_secret_callback=lambda uid: \"encrypted_secret\",\n    encryption_key=\"your-fernent-key-here\",\n    header_name=\"X-2FA-Token\"\n)\n</code></pre>"},{"location":"installation/#development","title":"Development","text":"<pre><code>git clone https://github.com/rennf93/two-fast-auth\ncd two-fast-auth\npip install -e .\n</code></pre>"},{"location":"installation/#dependency-matrix","title":"Dependency Matrix","text":"Component Required Version Purpose cryptography Yes * 44.0.0+ Secret encryption Python Yes 3.10+ Runtime FastAPI Yes 0.115.8+ Runtime FastAPI Users Optional 14.0.1+ Runtime Pillow Yes 11.1.0+ Runtime PyOTP Yes 2.9.0+ Runtime QRCode Yes 8.0+ Runtime SQLAlchemy Optional 2.0.37+ Runtime * Required for encryption features"},{"location":"installation/#whats-next","title":"What's Next?","text":"<ul> <li>First Steps</li> <li>Standard Implementation</li> <li>Encryption Implementation</li> <li>Example Application</li> <li>Encryption Example Application</li> </ul>"},{"location":"release-notes/","title":"Release Notes","text":""},{"location":"release-notes/#v110-2025-02-02","title":"v1.1.0 (2025-02-02)","text":""},{"location":"release-notes/#features","title":"Features","text":"<ul> <li>Added support for custom 2FA secret encryption &amp; decryption</li> </ul>"},{"location":"release-notes/#v105-2025-02-01","title":"v1.0.5 (2025-02-01)","text":""},{"location":"release-notes/#features_1","title":"Features","text":"<ul> <li>Initial release of Two-Fast-Auth</li> </ul>"},{"location":"core/core/","title":"TwoFactorAuth Class","text":""},{"location":"core/core/#class-definition","title":"Class Definition","text":"<pre><code>class TwoFactorAuth(\n    secret: str = None,\n    *,\n    qr_fill_color: str = \"black\",\n    qr_back_color: str = \"white\",\n    issuer_name: str = \"2FastAuth\"\n)\n</code></pre>"},{"location":"core/core/#parameters","title":"Parameters","text":"Parameter Type Default Description <code>secret</code> <code>str</code> <code>None</code> Base32 secret (auto-generated if None) <code>qr_fill_color</code> <code>str</code> \"black\" QR code foreground color <code>qr_back_color</code> <code>str</code> \"white\" QR code background color <code>issuer_name</code> <code>str</code> \"2FastAuth\" Service name for authenticator apps"},{"location":"core/core/#methods","title":"Methods","text":""},{"location":"core/core/#generate_qr_codeuser_email-str-bytesio","title":"<code>generate_qr_code(user_email: str) -&gt; BytesIO</code>","text":"<ul> <li>Generates QR code for authenticator setup</li> <li>Parameters:<ul> <li><code>user_email</code>: User's email address</li> </ul> </li> <li>Returns: BytesIO object containing QR code image</li> <li>Raises: <code>ValueError</code> if email is empty</li> </ul>"},{"location":"core/core/#verify_codecode-str-bool","title":"<code>verify_code(code: str) -&gt; bool</code>","text":"<ul> <li>Validates 6-digit TOTP code using pyotp</li> <li>Parameters:<ul> <li><code>code</code>: 6-digit TOTP code</li> </ul> </li> <li>Returns: <code>True</code> if code is valid</li> </ul>"},{"location":"core/core/#generate_recovery_codescount5-code_length10-tuplestr","title":"<code>generate_recovery_codes(count=5, code_length=10) -&gt; tuple[str, ...]</code>","text":"<ul> <li>Generates URL-safe recovery codes using secrets module</li> <li>Parameters:<ul> <li><code>count</code>: Number of codes to generate</li> <li><code>code_length</code>: Length of each code</li> </ul> </li> <li>Returns: Tuple of recovery codes</li> </ul>"},{"location":"core/core/#encrypt_secretsecret-str-encryption_key-optionalunionstr-bytes-none-str-static","title":"<code>encrypt_secret(secret: str, encryption_key: Optional[Union[str, bytes]] = None) -&gt; str</code> (static)","text":"<ul> <li>Encrypts 2FA secret using Fernet encryption</li> <li>Parameters:<ul> <li><code>secret</code>: Plaintext base32 secret</li> <li><code>encryption_key</code>: Fernet-compatible key (str/bytes)</li> </ul> </li> <li>Returns: Encrypted secret string</li> <li>Raises: <code>ValueError</code> for invalid inputs</li> </ul>"},{"location":"core/core/#decrypt_secretencrypted_secret-str-encryption_key-optionalunionstr-bytes-none-str-static","title":"<code>decrypt_secret(encrypted_secret: str, encryption_key: Optional[Union[str, bytes]] = None) -&gt; str</code> (static)","text":"<ul> <li>Decrypts encrypted 2FA secret</li> <li>Parameters:<ul> <li><code>encrypted_secret</code>: Encrypted secret string</li> <li><code>encryption_key</code>: Key used for encryption</li> </ul> </li> <li>Returns: Decrypted base32 secret</li> <li>Raises: <code>ValueError</code> for decryption failures</li> </ul>"},{"location":"core/core/#error-handling","title":"Error Handling","text":"<ul> <li><code>ValueError</code>: Invalid email address</li> <li><code>TypeError</code>: Invalid code format</li> </ul>"},{"location":"core/core/#example","title":"Example","text":"<pre><code>from two_fast_auth import TwoFactorAuth\n\n# Initialize with default settings\ntfa = TwoFactorAuth()\nqr = tfa.generate_qr_code(\"user@example.com\")\nvalid = tfa.verify_code(\"123456\")\ncodes = TwoFactorAuth.generate_recovery_codes()\n</code></pre>"},{"location":"crypto/encryption/","title":"Secret Encryption Guide","text":""},{"location":"crypto/encryption/#generating-encryption-keys","title":"Generating Encryption Keys","text":"<pre><code>from cryptography.fernet import Fernet\n\n# Generate a new key to encrypt/decrypt the 2FA secret\nkey = Fernet.generate_key()\nprint(\"Encryption key:\", key.decode())\n</code></pre>"},{"location":"crypto/encryption/#using-encryption","title":"Using Encryption","text":"<pre><code>from two_fast_auth import TwoFactorAuth\n\n# Encrypt the 2FA secret\nencrypted_secret = TwoFactorAuth.encrypt_secret(\n    \"plaintext_secret\",\n    encryption_key=\"your-encryption-key\"\n)\n\n# Decrypt the 2FA secret\ndecrypted_secret = TwoFactorAuth.decrypt_secret(\n    encrypted_secret,\n    encryption_key=\"your-encryption-key\"\n)\n</code></pre>"},{"location":"crypto/encryption/#middleware-configuration","title":"Middleware Configuration","text":"<pre><code>app.add_middleware(\n    TwoFactorMiddleware,\n    get_user_secret_callback=get_user_secret,\n    encryption_key=\"your-encryption-key\",\n    excluded_paths=[\"/docs\"]\n)\n</code></pre>"},{"location":"crypto/encryption/#best-practices","title":"Best Practices","text":"<ol> <li>Store encryption keys securely (e.g., environment variables/secret manager)</li> <li>Rotate keys periodically using key rotation strategies</li> <li>Use different keys for different environments</li> <li>Always validate keys during middleware initialization</li> </ol>"},{"location":"crypto/encryption/#migration-example","title":"Migration Example","text":"<pre><code># Migrate existing unencrypted secrets\nasync def migrate_secrets():\n    for user in get_all_users():\n        if not user.encrypted_secret:\n            encrypted = TwoFactorAuth.encrypt_secret(\n                user.plain_secret,\n                encryption_key=KEY\n            )\n            user.encrypted_secret = encrypted\n            await user.save()\n</code></pre>"},{"location":"middleware/middleware/","title":"TwoFactorMiddleware Class","text":""},{"location":"middleware/middleware/#class-definition","title":"Class Definition","text":"<pre><code>class TwoFactorMiddleware(BaseHTTPMiddleware):\n    def __init__(\n        self,\n        app: Callable[[Request], Awaitable[Response]],\n        get_user_secret_callback: Callable[[str], Awaitable[Optional[str]]],\n        *,\n        excluded_paths: Optional[List[str]] = None,\n        header_name: str = \"X-2FA-Code\",\n        encryption_key: Optional[Union[str, bytes]] = None\n    )\n</code></pre>"},{"location":"middleware/middleware/#parameters","title":"Parameters","text":"Parameter Type Default Description <code>app</code> <code>Callable</code> Required FastAPI application instance <code>get_user_secret_callback</code> <code>Callable</code> Required Async secret retrieval function <code>excluded_paths</code> <code>List[str]</code> <code>[\"/login\", \"/setup-2fa\"]</code> Paths to exclude from 2FA checks <code>header_name</code> <code>str</code> \"X-2FA-Code\" Header containing 2FA code <code>encryption_key</code> <code>str</code>/<code>bytes</code> <code>None</code> Fernet-compatible key for secret encryption"},{"location":"middleware/middleware/#methods","title":"Methods","text":""},{"location":"middleware/middleware/#dispatchrequest-request-call_next-response","title":"<code>dispatch(request: Request, call_next) -&gt; Response</code>","text":"<ul> <li>Main middleware handler</li> <li>Raises: <code>HTTPException</code> for invalid/missing codes</li> </ul>"},{"location":"middleware/middleware/#error-handling","title":"Error Handling","text":"<ul> <li><code>401 Unauthorized</code>: Missing/invalid 2FA code</li> <li><code>500 Internal Server Error</code>: Secret retrieval failure</li> <li><code>403 Forbidden</code>: Unauthenticated access attempt</li> </ul>"},{"location":"middleware/middleware/#example-without-encryption","title":"Example without Encryption","text":"<pre><code>from two_fast_auth import TwoFactorMiddleware\n\napp.add_middleware(\n    TwoFactorMiddleware,\n    get_user_secret_callback=lambda uid: \"user_secret\",\n    excluded_paths=[\"/docs\", \"/openapi.json\"]\n)\n</code></pre>"},{"location":"middleware/middleware/#example-with-encryption","title":"Example with Encryption","text":"<pre><code>app.add_middleware(\n    TwoFactorMiddleware,\n    get_user_secret_callback=lambda uid: \"encrypted_secret\",\n    encryption_key=\"your-32-url-safe-base64-key\",\n    excluded_paths=[\"/docs\"]\n)\n</code></pre>"},{"location":"middleware/middleware/#request-handling-flow-no-encryption","title":"Request Handling Flow (No Encryption)","text":"<pre><code>sequenceDiagram\n    participant Client\n    participant Middleware\n    participant Application\n\n    Client      -&gt;&gt;   Middleware: HTTP Request\n    Middleware  -&gt;&gt;   Middleware: Check excluded paths\n    Middleware  -&gt;&gt;   Middleware: Verify user authentication\n    Middleware  -&gt;&gt;   Middleware: Retrieve 2FA secret\n    Middleware  -&gt;&gt;   Middleware: Validate 2FA code\n    Middleware  -&gt;&gt;   Application: Forward valid request\n    Application -&gt;&gt;   Middleware: Generate response\n    Middleware  -&gt;&gt;   Client: Return response\n</code></pre>"},{"location":"middleware/middleware/#flow-no-encryption","title":"Flow (No Encryption)","text":"<pre><code>graph TD\n    A[Request] --&gt; B {Excluded path?}\n    B --&gt;  | Yes | C [Skip 2FA]\n    B --&gt;  | No  | D {Authenticated?}\n    D --&gt;  | No  | C\n    D --&gt;  | Yes | E {2FA Enabled?}\n    E --&gt;  | No  | C\n    E --&gt;  | Yes | F {Valid Code?}\n    F --&gt;  | Yes | C\n    F --&gt;  | No  | G [401 Error]\n</code></pre>"},{"location":"middleware/middleware/#request-handling-flow-with-encryption","title":"Request Handling Flow (With Encryption)","text":"<pre><code>sequenceDiagram\n    participant Client\n    participant Middleware\n    participant DB\n    participant Crypto\n\n    Client      -&gt;&gt;   Middleware: Request\n    Middleware  -&gt;&gt;   DB: Get encrypted_secret\n    DB          -&gt;&gt;   Middleware: encrypted_secret\n    Middleware  -&gt;&gt;   Crypto: Decrypt(encrypted_secret)\n    Crypto      -&gt;&gt;   Middleware: plaintext_secret\n    Middleware  -&gt;&gt;   Crypto: Verify code\n    Crypto      -&gt;&gt;   Middleware: Validation result\n    Middleware  -&gt;&gt;   Client: Response\n</code></pre>"},{"location":"middleware/middleware/#flow-with-encryption","title":"Flow (With Encryption)","text":"<pre><code>graph TD\n    A[Request] --&gt;  B {Excluded path?}\n    B --&gt;     |Yes| C [Skip 2FA]\n    B --&gt;     |No|  D {Authenticated?}\n    D --&gt;     |No|  C\n    D --&gt;     |Yes| E {2FA Enabled?}\n    E --&gt;     |No|  C\n    E --&gt;     |Yes| F [Decrypt Secret]\n    F          --&gt;  G {Valid Code?}\n    G --&gt;     |Yes| C\n    G --&gt;     |No|  H [401 Error]\n</code></pre>"},{"location":"tutorial/example_app/","title":"Example Application","text":"<pre><code># You'll have to create and import\n# your own user models, functions, db\n# and other dependencies.\n# Personal recommendation is to use\n# FastAPI Users and SQLAlchemy if you\n# don't need a fully customized user\n# management system.\nfrom database import async_session_maker\nfrom users import (\n    User,\n    UserRead,\n    UserCreate,\n    fastapi_users,\n    auth_backend,\n    current_active_user\n)\n\n# Import FastAPI and Two-Fast-Auth\nfrom fastapi import (\n    FastAPI,\n    Body,\n    Depends,\n    Header,\n    HTTPException,\n    status\n)\nfrom fastapi.responses import StreamingResponse\nfrom two_fast_auth import (\n    TwoFactorMiddleware,\n    TwoFactorAuth\n)\n\n\n# Create FastAPI instance\napp = FastAPI()\n\n\n# Get user secret callback for middleware\nasync def get_user_secret_callback(\n    user_id: str\n) -&gt; str:\n    async with async_session_maker() as session:\n        user = await session.get(\n            User,\n            user_id\n        )\n        return user.two_fa_secret if user else None\n\n\n# Add 2FA middleware\napp.add_middleware(\n    TwoFactorMiddleware,\n    get_user_secret_callback=get_user_secret_callback,\n    excluded_paths=[\n        \"/docs\", # Swagger UI\n        \"/openapi.json\", # OpenAPI JSON\n        \"/redoc\", # Redoc UI\n        \"/auth/jwt/login\", # FastAPI Users login\n        \"/auth/register\", # FastAPI Users register\n        \"/setup-2fa\", # Example endpoint\n        \"/verify-2fa\", # Example endpoint\n        \"/recovery-codes\" # Example endpoint\n    ]\n)\n\n\n# FastAPI Users Routers\n## Auth Router\napp.include_router(\n    fastapi_users.get_auth_router(\n        auth_backend\n    ),\n    prefix=\"/auth/jwt\",\n    tags=[\"Auth\"],\n)\n\n\n## Register Router\napp.include_router(\n    fastapi_users.get_register_router(\n        UserRead,\n        UserCreate\n    ),\n    prefix=\"/auth\",\n    tags=[\"Auth\"],\n)\n\n\n# Endpoints examples\n## Setup 2FA\n@app.post(\n    \"/setup-2fa\",\n    tags=[\"Auth\"]\n)\nasync def setup_2fa(\n    user: User = Depends(current_active_user)\n):\n    # Generate new 2FA secret\n    two_fa = TwoFactorAuth()\n\n    # Generate QR code\n    qr_code = two_fa.generate_qr_code(\n        user.email or user.username\n    )\n\n    # Generate recovery codes\n    recovery_codes = TwoFactorAuth.generate_recovery_codes()\n\n    # Store secret and recovery codes in DB\n    async with async_session_maker() as session:\n        db_user = await session.get(\n            User,\n            user.id\n        )\n        db_user.two_fa_secret = two_fa.secret\n        db_user.recovery_codes = recovery_codes\n        session.add(db_user)\n        await session.commit()\n        await session.refresh(db_user)\n\n    # Return QR code as image stream and other data in headers\n    return StreamingResponse(\n        qr_code,\n        media_type=\"image/png\",\n        headers={\n            \"X-2FA-Secret\": two_fa.secret,\n            \"X-Recovery-Codes\": \",\".join(recovery_codes)\n        }\n    )\n\n\n## Verify 2FA code\n@app.post(\n    \"/verify-2fa\",\n    tags=[\"Auth\"]\n)\nasync def verify_2fa(\n    code: str = Body(\n        ...,\n        embed=True\n    ),\n    user: User = Depends(current_active_user)\n):\n    if not user.two_fa_secret:\n        raise HTTPException(\n            status_code=status.HTTP_400_BAD_REQUEST,\n            detail=\"2FA not set up\"\n        )\n\n    two_fa = TwoFactorAuth(user.two_fa_secret)\n    if two_fa.verify_code(code):\n        return {\"success\": True}\n    return {\"success\": False}\n\n\n## Use recovery code\n@app.post(\n    \"/recovery-codes\",\n    tags=[\"Auth\"]\n)\nasync def use_recovery_code(\n    code: str = Body(\n        ...,\n        embed=True\n    ),\n    user: User = Depends(current_active_user)\n):\n    async with async_session_maker() as session:\n        # Get fresh user instance from database\n        db_user = await session.get(\n            User,\n            user.id\n        )\n\n        if not db_user.recovery_codes or code not in db_user.recovery_codes:\n            raise HTTPException(\n                status_code=status.HTTP_400_BAD_REQUEST,\n                detail=\"Invalid recovery code\"\n            )\n\n        # Remove used recovery code\n        updated_codes = [\n            c\n            for c in db_user.recovery_codes\n            if c != code\n        ]\n        db_user.recovery_codes = updated_codes\n        session.add(db_user)\n        await session.commit()\n\n    return {\"success\": True}\n\n\n## 2FA protected route example\n@app.get(\n    \"/protected-route\",\n    tags=[\"Protected\"]\n)\nasync def protected_route(\n    user: User = Depends(current_active_user),\n    x_2fa_code: str = Header(\n        ...,\n        alias=\"X-2FA-Code\"\n    )\n):\n    # Explicit 2FA verification for demonstration\n    if not user.two_fa_secret:\n        raise HTTPException(\n            status_code=status.HTTP_400_BAD_REQUEST,\n            detail=\"2FA not configured\"\n        )\n\n    if not TwoFactorAuth(user.two_fa_secret).verify_code(x_2fa_code):\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid 2FA code\"\n        )\n\n    return {\n        \"message\": \"You've accessed a protected route with valid 2FA!\",\n        \"user_id\": str(user.id)\n    }\n\n\n# Run the API server\nif __name__ == \"__main__\":\n    import uvicorn\n    uvicorn.run(\n        app,\n        host=\"0.0.0.0\",\n        port=8000\n    )\n</code></pre>"},{"location":"tutorial/example_app_encryption/","title":"Encrypted Example Application","text":"<pre><code># You'll have to create and import\n# your own user models, functions, db\n# and other dependencies.\n# Personal recommendation is to use\n# FastAPI Users and SQLAlchemy if you\n# don't need a fully customized user\n# management system.\nfrom cryptography.fernet import Fernet\nfrom database import async_session_maker\nfrom users import (\n    User,\n    UserRead,\n    UserCreate,\n    fastapi_users,\n    auth_backend,\n    current_active_user\n)\n\n# Import FastAPI and Two-Fast-Auth\nfrom fastapi import (\n    FastAPI,\n    Body,\n    Depends,\n    Header,\n    HTTPException,\n    status\n)\nfrom fastapi.responses import StreamingResponse\nfrom two_fast_auth import (\n    TwoFactorMiddleware,\n    TwoFactorAuth\n)\n\n\n# Generate or use a persistent encryption key\nENCRYPTION_KEY = Fernet.generate_key()\n\n\n# Create FastAPI instance\napp = FastAPI()\n\n\n# Get encrypted secret from database\nasync def get_encrypted_secret(user_id: str) -&gt; str:\n    async with async_session_maker() as session:\n        user = await session.get(User, user_id)\n        return user.encrypted_secret if user else None\n\n\n# Middleware with encryption\napp.add_middleware(\n    TwoFactorMiddleware,\n    get_user_secret_callback=lambda uid: get_encrypted_secret(uid),\n    encryption_key=ENCRYPTION_KEY,\n    excluded_paths=[\n        \"/docs\", # Swagger UI\n        \"/openapi.json\", # OpenAPI JSON\n        \"/redoc\", # Redoc UI\n        \"/auth/jwt/login\", # FastAPI Users login\n        \"/auth/register\", # FastAPI Users register\n        \"/setup-2fa\", # Example endpoint\n        \"/verify-2fa\", # Example endpoint\n        \"/recovery-codes\" # Example endpoint\n    ]\n)\n\n\n# FastAPI Users Routers\n## Auth Router\napp.include_router(\n    fastapi_users.get_auth_router(\n        auth_backend\n    ),\n    prefix=\"/auth/jwt\",\n    tags=[\"Auth\"],\n)\n\n\n## Register Router\napp.include_router(\n    fastapi_users.get_register_router(\n        UserRead,\n        UserCreate\n    ),\n    prefix=\"/auth\",\n    tags=[\"Auth\"],\n)\n\n\n# Endpoints examples\n## Setup 2FA with Headers\n@app.post(\n    \"/setup-2fa\",\n    tags=[\"Auth\"]\n)\nasync def setup_2fa(\n    user: User = Depends(current_active_user)\n):\n    tfa = TwoFactorAuth()\n    encrypted_secret = TwoFactorAuth.encrypt_secret(\n        tfa.secret,\n        ENCRYPTION_KEY\n    )\n    recovery_codes = TwoFactorAuth.generate_recovery_codes()\n\n    async with async_session_maker() as session:\n        db_user = await session.get(User, user.id)\n        db_user.encrypted_secret = encrypted_secret\n        db_user.recovery_codes = recovery_codes\n        await session.commit()\n\n    return StreamingResponse(\n        tfa.generate_qr_code(user.email),\n        media_type=\"image/png\",\n        headers={\n            \"X-Encrypted-Secret\": encrypted_secret,\n            \"X-Recovery-Codes\": \",\".join(recovery_codes)\n        }\n    )\n\n\n## Verification with Manual Decryption\n@app.post(\n    \"/verify-2fa\",\n    tags=[\"Auth\"]\n)\nasync def verify_2fa(\n    code: str = Body(...),\n    user: User = Depends(current_active_user)\n):\n    async with async_session_maker() as session:\n        db_user = await session.get(User, user.id)\n        if not db_user.encrypted_secret:\n            raise HTTPException(\n                status_code=400,\n                detail=\"2FA not set up\"\n            )\n\n        secret = TwoFactorAuth.decrypt_secret(\n            db_user.encrypted_secret,\n            ENCRYPTION_KEY\n        )\n\n    if not TwoFactorAuth(secret).verify_code(code):\n        raise HTTPException(\n            status_code=401,\n            detail=\"Invalid code\"\n        )\n\n    return {\"status\": \"verified\"}\n\n\n## 2FA protected\n@app.get(\n    \"/protected-route\",\n    tags=[\"Protected\"]\n)\nasync def protected_route(\n    user: User = Depends(current_active_user),\n    x_2fa_code: str = Header(\n        ...,\n        alias=\"X-2FA-Code\"\n    )\n):\n    # Explicit 2FA verification for demonstration\n    if not user.two_fa_secret:\n        raise HTTPException(\n            status_code=status.HTTP_400_BAD_REQUEST,\n            detail=\"2FA not configured\"\n        )\n\n    if not TwoFactorAuth(user.two_fa_secret).verify_code(x_2fa_code):\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid 2FA code\"\n        )\n\n    return {\n        \"message\": \"You've accessed a protected route with valid 2FA!\",\n        \"user_id\": str(user.id)\n    }\n\n\n# Run the API server\nif __name__ == \"__main__\":\n    import uvicorn\n    uvicorn.run(\n        app,\n        host=\"0.0.0.0\",\n        port=8000\n    )\n</code></pre>"},{"location":"tutorial/example_implementation/","title":"Complete Example Implementation","text":""},{"location":"tutorial/example_implementation/#full-configuration","title":"Full Configuration","text":"<pre><code>from fastapi import FastAPI, Depends, HTTPException\nfrom two_fast_auth import TwoFactorMiddleware, TwoFactorAuth\n\napp = FastAPI()\n\n# Database setup and user model\n# ...\n\n# Middleware configuration\napp.add_middleware(\n    TwoFactorMiddleware,\n    get_user_secret_callback=get_user_secret,\n    excluded_paths=[\"/setup-2fa\", \"/verify-2fa\"]\n)\n</code></pre>"},{"location":"tutorial/example_implementation/#auth-endpoints","title":"Auth endpoints","text":"<pre><code>@app.post(\"/setup-2fa\")\nasync def setup_2fa_endpoint(\n    user: User = Depends(current_active_user)\n):\n    tfa = TwoFactorAuth()\n    qr_code = tfa.generate_qr_code(user.email)\n    user.two_fa_secret = tfa.secret\n    await user.save()\n    return StreamingResponse(qr_code, media_type=\"image/png\")\n\n@app.post(\"/verify-2fa\")\nasync def verify_2fa_endpoint(\n    code: str = Form(...),\n    user: User = Depends(current_active_user)\n):\n    if not TwoFactorAuth(user.two_fa_secret).verify_code(code):\n        raise HTTPException(\n            status_code=401,\n            detail=\"Invalid 2FA code\"\n        )\n    return {\"status\": \"verified\"}\n</code></pre>"},{"location":"tutorial/example_implementation/#protected-endpoint","title":"Protected endpoint","text":"<pre><code>@app.get(\"/protected-data\")\nasync def protected_data(\n    user: User = Depends(current_active_user)\n):\n    return {\"data\": \"Sensitive information\"}\n</code></pre>"},{"location":"tutorial/example_implementation/#testing-workflow","title":"Testing Workflow","text":"<ol> <li>Start server: <code>uvicorn example_app:app --reload</code></li> <li>Register user at <code>/auth/register</code></li> <li>Login with credentials at <code>/auth/jwt/login</code></li> <li>Access <code>/setup-2fa</code> to get QR code</li> <li>Scan code in authenticator app</li> <li>Access protected routes with valid code</li> </ol>"},{"location":"tutorial/example_implementation/#notes","title":"Notes","text":"<ul> <li>See Example Application for complete implementation</li> <li>For encrypted secrets, use Encryption Implementation</li> </ul>"},{"location":"tutorial/example_implementation_encryption/","title":"Encryption Implementation Guide","text":""},{"location":"tutorial/example_implementation_encryption/#full-configuration","title":"Full Configuration","text":"<pre><code>from cryptography.fernet import Fernet\nfrom two_fast_auth import TwoFactorMiddleware, TwoFactorAuth\n\nENCRYPTION_KEY = Fernet.generate_key()  # Store securely in production\n\napp.add_middleware(\n    TwoFactorMiddleware,\n    get_user_secret_callback=get_encrypted_secret,\n    encryption_key=ENCRYPTION_KEY,\n    excluded_paths=[\"/setup-2fa\", \"/verify-2fa\"]\n)\n\nasync def get_encrypted_secret(user_id: str) -&gt; str:\n    # Return encrypted secret from your database\n    return await fetch_encrypted_secret(user_id)\n</code></pre>"},{"location":"tutorial/example_implementation_encryption/#auth-endpoints","title":"Auth Endpoints","text":"<pre><code>@app.post(\"/setup-2fa\")\nasync def setup_2fa_endpoint(user: User = Depends(current_user)):\n    tfa = TwoFactorAuth()\n    encrypted_secret = TwoFactorAuth.encrypt_secret(\n        tfa.secret,\n        ENCRYPTION_KEY\n    )\n    await store_encrypted_secret(user.id, encrypted_secret)\n    return {\n        \"qr_code\": tfa.generate_qr_code(user.email),\n        \"encrypted_secret\": encrypted_secret\n    }\n\n@app.post(\"/verify-2fa\")\nasync def verify_2fa_endpoint(code: str, user: User = Depends(current_user)):\n    encrypted_secret = await get_encrypted_secret(user.id)\n    secret = TwoFactorAuth.decrypt_secret(encrypted_secret, ENCRYPTION_KEY)\n\n    if not TwoFactorAuth(secret).verify_code(code):\n        raise HTTPException(401, \"Invalid 2FA code\")\n\n    return {\"status\": \"verified\"}\n</code></pre>"},{"location":"tutorial/example_implementation_encryption/#protected-endpoint","title":"Protected Endpoint","text":"<pre><code>@app.get(\"/protected-data\")\nasync def protected_data(user: User = Depends(current_active_user)):\n    return {\"data\": \"Sensitive encrypted data\"}\n</code></pre>"},{"location":"tutorial/example_implementation_encryption/#testing-workflow","title":"Testing Workflow","text":"<ol> <li>Generate encryption key: <code>Fernet.generate_key()</code></li> <li>Start server with encryption middleware</li> <li>Setup 2FA to get encrypted secret</li> <li>Verify requests automatically decrypt secrets</li> <li>Test with invalid encryption key to validate security</li> </ol>"},{"location":"tutorial/example_implementation_encryption/#notes","title":"Notes","text":"<ul> <li>See Encryption Example Application</li> <li>For non-encrypted flow, refer to Standard Implementation</li> </ul>"},{"location":"tutorial/first-steps/","title":"Getting Started with 2FA","text":"<ol> <li> <p>Install Package <pre><code>pip install two-fast-auth\n</code></pre></p> </li> <li> <p>Add Middleware <pre><code># With encryption (Optional, Recommended)\nfrom two_fast_auth import TwoFactorMiddleware\n\napp.add_middleware(\n    TwoFactorMiddleware,\n    get_user_secret_callback=get_user_secret,\n    encryption_key=\"your-fernent-key-here\",\n    excluded_paths=[\"/setup-2fa\"]\n)\n\n# Without encryption\nfrom two_fast_auth import TwoFactorMiddleware\n\napp.add_middleware(\n    TwoFactorMiddleware,\n    get_user_secret_callback=get_user_secret,\n    encryption_key=\"your-fernent-key-here\",\n    excluded_paths=[\"/setup-2fa\"]\n)\n</code></pre></p> </li> <li> <p>Create Setup Endpoint (Encrypted) <pre><code>from two_fast_auth import TwoFactorAuth\n\n@app.post(\"/setup-2fa\")\nasync def setup_2fa(user: User = Depends(current_user)):\n    tfa = TwoFactorAuth()\n    encrypted_secret = TwoFactorAuth.encrypt_secret(\n        tfa.secret,\n        encryption_key=\"your-key-here\"  # From middleware config\n    )\n    return {\n        \"qr_code\": tfa.generate_qr_code(user.email),\n        \"secret\": encrypted_secret  # Store this in DB\n    }\n</code></pre></p> </li> <li> <p>Implement Verification (Encrypted) <pre><code>@app.post(\"/verify-2fa\")\nasync def verify_2fa(code: str, user: User = Depends(current_user)):\n    # Secret is automatically decrypted by middleware\n    if not TwoFactorAuth(user.two_fa_secret).verify_code(code):\n        raise HTTPException(400, \"Invalid code\")\n    return {\"status\": \"verified\"}\n</code></pre></p> </li> <li> <p>Manual Secret Handling (Optional) <pre><code># Encrypt existing secret\nencrypted = TwoFactorAuth.encrypt_secret(\n    \"BASE32SECRET\",\n    encryption_key=\"your-key\"\n)\n\n# Decrypt secret\noriginal = TwoFactorAuth.decrypt_secret(\n    encrypted,\n    encryption_key=\"your-key\"\n)\n</code></pre></p> </li> </ol>"},{"location":"tutorial/first-steps/#next-steps","title":"Next Steps","text":"<ul> <li>Explore encryption example application</li> <li>See full encryption implementation</li> </ul>"},{"location":"tutorial/two-factor-auth/","title":"Implementing TwoFactorAuth","text":""},{"location":"tutorial/two-factor-auth/#qr-code-generation","title":"QR Code Generation","text":"<pre><code>from two_fast_auth import TwoFactorAuth\nfrom fastapi.responses import StreamingResponse\n\n@app.post(\"/setup-2fa\")\nasync def setup_2fa(\n    user: User = Depends(current_active_user)\n):\n    tfa = TwoFactorAuth(\n        issuer_name=\"MyApp\",\n        qr_fill_color=\"#4a86e8\"\n    )\n    qr_code = tfa.generate_qr_code(user.email)\n\n    # Store secret in database\n    user.two_fa_secret = tfa.secret\n    await user.save()\n\n    return StreamingResponse(qr_code, media_type=\"image/png\")\n</code></pre>"},{"location":"tutorial/two-factor-auth/#encrypted-secret-setup","title":"Encrypted Secret Setup","text":"<pre><code>@app.post(\"/setup-2fa\")\nasync def setup_2fa(user: User = Depends(current_active_user)):\n    tfa = TwoFactorAuth()\n    encrypted_secret = TwoFactorAuth.encrypt_secret(\n        tfa.secret,\n        encryption_key=\"your-encryption-key\"  # Match middleware key\n    )\n\n    user.two_fa_secret = encrypted_secret\n    await user.save()\n\n    return {\n        \"qr_code\": tfa.generate_qr_code(user.email),\n        \"secret\": \"Store this encrypted value: \" + encrypted_secret\n    }\n</code></pre>"},{"location":"tutorial/two-factor-auth/#encryption-verification","title":"Encryption Verification","text":"<pre><code>@app.post(\"/verify-2fa\")\nasync def verify_2fa(\n    code: str = Form(...),\n    user: User = Depends(current_active_user)\n):\n    try:\n        secret = TwoFactorAuth.decrypt_secret(\n            user.two_fa_secret,\n            encryption_key=\"your-encryption-key\"\n        )\n    except ValueError as e:\n        raise HTTPException(400, detail=str(e))\n\n    if not TwoFactorAuth(secret).verify_code(code):\n        raise HTTPException(401, \"Invalid code\")\n\n    return {\"status\": \"verified\"}\n</code></pre>"},{"location":"tutorial/two-factor-auth/#recovery-code-management","title":"Recovery Code Management","text":"<pre><code>@app.post(\"/generate-recovery-codes\")\nasync def generate_recovery_codes(\n    user: User = Depends(current_active_user)\n):\n    codes = TwoFactorAuth.generate_recovery_codes(\n        count=10,\n        code_length=8\n    )\n    user.recovery_codes = codes\n    await user.save()\n    return {\"recovery_codes\": codes}\n</code></pre>"},{"location":"tutorial/two-factor-auth/#notes","title":"Notes","text":"<ul> <li>For complete encrypted examples, see Encryption Implementation</li> </ul>"},{"location":"tutorial/two-factor-middleware/","title":"Implementing TwoFactorMiddleware","text":""},{"location":"tutorial/two-factor-middleware/#basic-configuration","title":"Basic Configuration","text":"<pre><code>from two_fast_auth import TwoFactorMiddleware\n\nasync def get_user_secret(\n    user_id: str\n) -&gt; Optional[str]:\n    async with AsyncSession() as session:\n        user = await session.get(\n            User,\n            user_id\n        )\n        return user.two_fa_secret if user else None\n\napp.add_middleware(\n    TwoFactorMiddleware,\n    get_user_secret_callback=get_user_secret,\n    excluded_paths=[\n        \"/docs\",\n        \"/openapi.json\",\n        \"/auth/jwt/login\",\n        \"/setup-2fa\"\n    ],\n    header_name=\"X-2FA-Code\"\n)\n</code></pre>"},{"location":"tutorial/two-factor-middleware/#encryption-configuration","title":"Encryption Configuration","text":"<pre><code>app.add_middleware(\n    TwoFactorMiddleware,\n    get_user_secret_callback=get_user_secret,\n    encryption_key=\"your-32-url-safe-base64-key\",  # Required for encrypted secrets\n    excluded_paths=[\n        \"/docs\",\n        \"/setup-2fa\"\n    ],\n    header_name=\"X-2FA-Code\"\n)\n</code></pre>"},{"location":"tutorial/two-factor-middleware/#handling-exceptions","title":"Handling Exceptions","text":"<pre><code>@app.exception_handler(HTTPException)\nasync def two_fa_exception_handler(\n    request: Request,\n    exc: HTTPException\n):\n    if exc.status_code == 401:\n        return JSONResponse(\n            status_code=401,\n            content={\n                \"detail\": \"2FA verification required\"\n            }\n        )\n    return await http_exception_handler(request, exc)\n</code></pre>"},{"location":"tutorial/two-factor-middleware/#testing-middleware","title":"Testing Middleware","text":"<pre><code>def test_2fa_protected_route():\n    # Valid request\n    response = client.get(\n        \"/protected\",\n        headers={\"X-2FA-Code\": \"123456\"}\n    )\n    assert response.status_code == 200\n\n    # Missing 2FA header\n    response = client.get(\"/protected\")\n    assert response.status_code == 401\n</code></pre>"},{"location":"tutorial/two-factor-middleware/#encryption-validation","title":"Encryption Validation","text":"<pre><code># Test valid encrypted flow\ndef test_encrypted_flow():\n    valid_code = get_current_totp_code(secret)\n    response = client.get(\n        \"/protected\",\n        headers={\"X-2FA-Code\": valid_code}\n    )\n    assert response.status_code == 200\n\n# Test invalid encryption key\ndef test_bad_encryption():\n    with pytest.raises(ValueError) as exc:\n        TwoFactorAuth.decrypt_secret(\n            encrypted_secret,\n            encryption_key=\"wrong-key\"\n        )\n    assert \"Decryption failed\" in str(exc.value)\n</code></pre>"},{"location":"tutorial/two-factor-middleware/#notes","title":"Notes","text":"<ul> <li>For full encrypted middleware examples, refer to Encryption Implementation</li> </ul>"}]}