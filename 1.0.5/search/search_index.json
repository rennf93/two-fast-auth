{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Two-Fast-Auth","text":"<p><code>two-fast-auth</code> is a FastAPI middleware for simplified 2FA implementation. It integrates seamlessly with FastAPI to offer robust protection against various security threats, ensuring your application remains secure and reliable.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>QR Code Generation</li> <li>TOTP Verification</li> <li>Recovery Codes Generation</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":"<pre><code>from fastapi import FastAPI\nfrom two_fast_auth import TwoFactorMiddleware\n\napp = FastAPI()\napp.add_middleware(\n    TwoFactorMiddleware,\n    get_user_secret_callback=lambda uid: \"secret\",\n    excluded_paths=[\"/docs\"]\n)\n</code></pre>"},{"location":"#documentation","title":"Documentation","text":"<ul> <li>Installation</li> <li>First Steps</li> <li>Example Application</li> <li>Example Implementation</li> <li>TwoFactorAuth Class</li> <li>TwoFactorMiddleware Class</li> </ul>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#requirements","title":"Requirements","text":"<ul> <li>Python 3.10+</li> <li>FastAPI</li> <li>pyotp</li> <li>qrcode</li> <li>Pillow</li> </ul>"},{"location":"installation/#install","title":"Install","text":"<pre><code>pip install two-fast-auth\n</code></pre>"},{"location":"installation/#verify-installation","title":"Verify Installation","text":"<pre><code>import two_fast_auth\nprint(two_fast_auth.__version__)\n</code></pre>"},{"location":"installation/#configuration","title":"Configuration","text":"<pre><code>from two_fast_auth import TwoFactorMiddleware\n\napp.add_middleware(\n    TwoFactorMiddleware,\n    get_user_secret_callback=lambda uid: \"user_secret\",\n    header_name=\"X-2FA-Token\"\n)\n</code></pre>"},{"location":"installation/#development","title":"Development","text":"<pre><code>git clone https://github.com/rennf93/two-fast-auth\ncd two-fast-auth\npip install -e .\n</code></pre>"},{"location":"installation/#dependency-matrix","title":"Dependency Matrix","text":"Component Required Version Python Yes 3.10+ FastAPI Yes 0.115.8+ FastAPI Users Optional 14.0.1+ Pillow Yes 11.1.0+ PyOTP Yes 2.9.0+ QRCode Yes 8.0+ SQLAlchemy Optional 2.0.37+"},{"location":"installation/#whats-next","title":"What's Next?","text":"<ul> <li>First Steps</li> <li>Learn how to implement 2FA in your FastAPI application</li> <li>See an example application</li> </ul>"},{"location":"release-notes/","title":"Release Notes","text":""},{"location":"release-notes/#v105-2025-02-01","title":"v1.0.5 (2025-02-01)","text":""},{"location":"release-notes/#features","title":"Features","text":"<ul> <li>Initial release of Two-Fast-Auth</li> </ul>"},{"location":"core/core/","title":"TwoFactorAuth Class","text":""},{"location":"core/core/#class-definition","title":"Class Definition","text":"<pre><code>class TwoFactorAuth(\n    secret: str = None,\n    *,\n    qr_fill_color: str = \"black\",\n    qr_back_color: str = \"white\",\n    issuer_name: str = \"2FastAuth\"\n)\n</code></pre>"},{"location":"core/core/#parameters","title":"Parameters","text":"Parameter Type Default Description <code>secret</code> <code>str</code> <code>None</code> Base32 secret (auto-generated if None) <code>qr_fill_color</code> <code>str</code> \"black\" QR code foreground color <code>qr_back_color</code> <code>str</code> \"white\" QR code background color <code>issuer_name</code> <code>str</code> \"2FastAuth\" Service name for authenticator apps"},{"location":"core/core/#methods","title":"Methods","text":""},{"location":"core/core/#generate_qr_codeuser_email-str-bytesio","title":"<code>generate_qr_code(user_email: str) -&gt; BytesIO</code>","text":"<ul> <li>Generates QR code for authenticator setup</li> <li>Raises: <code>ValueError</code> if email is empty</li> </ul>"},{"location":"core/core/#verify_codecode-str-bool","title":"<code>verify_code(code: str) -&gt; bool</code>","text":"<ul> <li>Validates 6-digit TOTP code using pyotp</li> <li>Returns: <code>True</code> if code is valid</li> </ul>"},{"location":"core/core/#generate_recovery_codescount5-code_length10-tuplestr","title":"<code>generate_recovery_codes(count=5, code_length=10) -&gt; tuple[str, ...]</code>","text":"<ul> <li>Generates URL-safe recovery codes using secrets module</li> </ul>"},{"location":"core/core/#error-handling","title":"Error Handling","text":"<ul> <li><code>ValueError</code>: Invalid email address</li> <li><code>TypeError</code>: Invalid code format</li> </ul>"},{"location":"core/core/#example","title":"Example","text":"<pre><code>from two_fast_auth import TwoFactorAuth\n\n# Initialize with default settings\ntfa = TwoFactorAuth()\nqr = tfa.generate_qr_code(\"user@example.com\")\nvalid = tfa.verify_code(\"123456\")\ncodes = TwoFactorAuth.generate_recovery_codes()\n</code></pre>"},{"location":"middleware/middleware/","title":"TwoFactorMiddleware Class","text":""},{"location":"middleware/middleware/#class-definition","title":"Class Definition","text":"<pre><code>class TwoFactorMiddleware(BaseHTTPMiddleware):\n    def __init__(\n        self,\n        app: Callable[[Request], Awaitable[Response]],\n        get_user_secret_callback: Callable[[str], Awaitable[Optional[str]]],\n        *,\n        excluded_paths: Optional[List[str]] = None,\n        header_name: str = \"X-2FA-Code\"\n    )\n</code></pre>"},{"location":"middleware/middleware/#parameters","title":"Parameters","text":"Parameter Type Default Description <code>app</code> <code>Callable</code> Required FastAPI application instance <code>get_user_secret_callback</code> <code>Callable</code> Required Async secret retrieval function <code>excluded_paths</code> <code>List[str]</code> <code>[\"/login\", \"/setup-2fa\"]</code> Paths to exclude from 2FA checks <code>header_name</code> <code>str</code> \"X-2FA-Code\" Header containing 2FA code"},{"location":"middleware/middleware/#methods","title":"Methods","text":""},{"location":"middleware/middleware/#dispatchrequest-request-call_next-response","title":"<code>dispatch(request: Request, call_next) -&gt; Response</code>","text":"<ul> <li>Main middleware handler</li> <li>Raises: <code>HTTPException</code> for invalid/missing codes</li> </ul>"},{"location":"middleware/middleware/#error-handling","title":"Error Handling","text":"<ul> <li><code>401 Unauthorized</code>: Missing/invalid 2FA code</li> <li><code>500 Internal Server Error</code>: Secret retrieval failure</li> <li><code>403 Forbidden</code>: Unauthenticated access attempt</li> </ul>"},{"location":"middleware/middleware/#example","title":"Example","text":"<pre><code>from two_fast_auth import TwoFactorMiddleware\n\napp.add_middleware(\n    TwoFactorMiddleware,\n    get_user_secret_callback=lambda uid: \"user_secret\",\n    excluded_paths=[\"/docs\", \"/openapi.json\"]\n)\n</code></pre>"},{"location":"middleware/middleware/#request-handling-flow","title":"Request Handling Flow","text":"<pre><code>sequenceDiagram\n    participant Client\n    participant Middleware\n    participant Application\n\n    Client      -&gt;&gt;   Middleware: HTTP Request\n    Middleware  -&gt;&gt;   Middleware: Check excluded paths\n    Middleware  -&gt;&gt;   Middleware: Verify user authentication\n    Middleware  -&gt;&gt;   Middleware: Retrieve 2FA secret\n    Middleware  -&gt;&gt;   Middleware: Validate 2FA code\n    Middleware  -&gt;&gt;   Application: Forward valid request\n    Application -&gt;&gt;   Middleware: Generate response\n    Middleware  -&gt;&gt;   Client: Return response\n</code></pre>"},{"location":"middleware/middleware/#flow","title":"Flow","text":"<pre><code>graph TD\n    A[Request] --&gt; B {Excluded path?}\n    B --&gt;  | Yes | C [Skip 2FA]\n    B --&gt;  | No  | D {Authenticated?}\n    D --&gt;  | No  | C\n    D --&gt;  | Yes | E {2FA Enabled?}\n    E --&gt;  | No  | C\n    E --&gt;  | Yes | F {Valid Code?}\n    F --&gt;  | Yes | C\n    F --&gt;  | No  | G [401 Error]\n</code></pre>"},{"location":"tutorial/example_app/","title":"Example Application","text":"<pre><code># You'll have to create and import\n# your own user models, functions, db\n# and other dependencies.\n# Personal recommendation is to use\n# FastAPI Users and SQLAlchemy if you\n# don't need a fully customized user\n# management system.\nfrom database import async_session_maker\nfrom users import (\n    User,\n    UserRead,\n    UserCreate,\n    fastapi_users,\n    auth_backend,\n    current_active_user\n)\n\n# Import FastAPI and Two-Fast-Auth\nfrom fastapi import (\n    FastAPI,\n    Body,\n    Depends,\n    Header,\n    HTTPException,\n    status\n)\nfrom fastapi.responses import StreamingResponse\nfrom two_fast_auth import (\n    TwoFactorMiddleware,\n    TwoFactorAuth\n)\n\n\n# Create FastAPI instance\napp = FastAPI()\n\n\n# Get user secret callback for middleware\nasync def get_user_secret_callback(\n    user_id: str\n) -&gt; str:\n    async with async_session_maker() as session:\n        user = await session.get(\n            User,\n            user_id\n        )\n        return user.two_fa_secret if user else None\n\n\n# Add 2FA middleware\napp.add_middleware(\n    TwoFactorMiddleware,\n    get_user_secret_callback=get_user_secret_callback,\n    excluded_paths=[\n        \"/docs\", # Swagger UI\n        \"/openapi.json\", # OpenAPI JSON\n        \"/redoc\", # Redoc UI\n        \"/auth/jwt/login\", # FastAPI Users login\n        \"/auth/register\", # FastAPI Users register\n        \"/setup-2fa\", # Example endpoint\n        \"/verify-2fa\", # Example endpoint\n        \"/recovery-codes\" # Example endpoint\n    ]\n)\n\n\n# FastAPI Users Routers\n## Auth Router\napp.include_router(\n    fastapi_users.get_auth_router(\n        auth_backend\n    ),\n    prefix=\"/auth/jwt\",\n    tags=[\"Auth\"],\n)\n\n\n## Register Router\napp.include_router(\n    fastapi_users.get_register_router(\n        UserRead,\n        UserCreate\n    ),\n    prefix=\"/auth\",\n    tags=[\"Auth\"],\n)\n\n\n# Endpoints examples\n## Setup 2FA\n@app.post(\n    \"/setup-2fa\",\n    tags=[\"Auth\"]\n)\nasync def setup_2fa(\n    user: User = Depends(current_active_user)\n):\n    # Generate new 2FA secret\n    two_fa = TwoFactorAuth()\n\n    # Generate QR code\n    qr_code = two_fa.generate_qr_code(\n        user.email or user.username\n    )\n\n    # Generate recovery codes\n    recovery_codes = TwoFactorAuth.generate_recovery_codes()\n\n    # Store secret and recovery codes in DB\n    async with async_session_maker() as session:\n        db_user = await session.get(\n            User,\n            user.id\n        )\n        db_user.two_fa_secret = two_fa.secret\n        db_user.recovery_codes = recovery_codes\n        session.add(db_user)\n        await session.commit()\n        await session.refresh(db_user)\n\n    # Return QR code as image stream and other data in headers\n    return StreamingResponse(\n        qr_code,\n        media_type=\"image/png\",\n        headers={\n            \"X-2FA-Secret\": two_fa.secret,\n            \"X-Recovery-Codes\": \",\".join(recovery_codes)\n        }\n    )\n\n\n## Verify 2FA code\n@app.post(\n    \"/verify-2fa\",\n    tags=[\"Auth\"]\n)\nasync def verify_2fa(\n    code: str = Body(\n        ...,\n        embed=True\n    ),\n    user: User = Depends(current_active_user)\n):\n    if not user.two_fa_secret:\n        raise HTTPException(\n            status_code=status.HTTP_400_BAD_REQUEST,\n            detail=\"2FA not set up\"\n        )\n\n    two_fa = TwoFactorAuth(user.two_fa_secret)\n    if two_fa.verify_code(code):\n        return {\"success\": True}\n    return {\"success\": False}\n\n\n## Use recovery code\n@app.post(\n    \"/recovery-codes\",\n    tags=[\"Auth\"]\n)\nasync def use_recovery_code(\n    code: str = Body(\n        ...,\n        embed=True\n    ),\n    user: User = Depends(current_active_user)\n):\n    async with async_session_maker() as session:\n        # Get fresh user instance from database\n        db_user = await session.get(\n            User,\n            user.id\n        )\n\n        if not db_user.recovery_codes or code not in db_user.recovery_codes:\n            raise HTTPException(\n                status_code=status.HTTP_400_BAD_REQUEST,\n                detail=\"Invalid recovery code\"\n            )\n\n        # Remove used recovery code\n        updated_codes = [\n            c\n            for c in db_user.recovery_codes\n            if c != code\n        ]\n        db_user.recovery_codes = updated_codes\n        session.add(db_user)\n        await session.commit()\n\n    return {\"success\": True}\n\n\n## 2FA protected route example\n@app.get(\n    \"/protected-route\",\n    tags=[\"Protected\"]\n)\nasync def protected_route(\n    user: User = Depends(current_active_user),\n    x_2fa_code: str = Header(\n        ...,\n        alias=\"X-2FA-Code\"\n    )\n):\n    # Explicit 2FA verification for demonstration\n    if not user.two_fa_secret:\n        raise HTTPException(\n            status_code=status.HTTP_400_BAD_REQUEST,\n            detail=\"2FA not configured\"\n        )\n\n    if not TwoFactorAuth(user.two_fa_secret).verify_code(x_2fa_code):\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid 2FA code\"\n        )\n\n    return {\n        \"message\": \"You've accessed a protected route with valid 2FA!\",\n        \"user_id\": str(user.id)\n    }\n\n\n# Run the API server\nif __name__ == \"__main__\":\n    import uvicorn\n    uvicorn.run(\n        app,\n        host=\"0.0.0.0\",\n        port=8000\n    )\n</code></pre>"},{"location":"tutorial/example_implementation/","title":"Complete Example Implementation","text":""},{"location":"tutorial/example_implementation/#full-application-setup","title":"Full Application Setup","text":"<pre><code>from fastapi import FastAPI, Depends, HTTPException\nfrom two_fast_auth import TwoFactorMiddleware, TwoFactorAuth\n\napp = FastAPI()\n\n# Database setup and user model\n# ...\n\n# Middleware configuration\napp.add_middleware(\n    TwoFactorMiddleware,\n    get_user_secret_callback=get_user_secret,\n    excluded_paths=[\"/setup-2fa\", \"/verify-2fa\"]\n)\n\n# Auth endpoints\n@app.post(\"/setup-2fa\")\nasync def setup_2fa_endpoint(\n    user: User = Depends(current_active_user)\n):\n    tfa = TwoFactorAuth()\n    qr_code = tfa.generate_qr_code(user.email)\n    user.two_fa_secret = tfa.secret\n    await user.save()\n    return StreamingResponse(qr_code, media_type=\"image/png\")\n\n@app.post(\"/verify-2fa\")\nasync def verify_2fa_endpoint(\n    code: str = Form(...),\n    user: User = Depends(current_active_user)\n):\n    if not TwoFactorAuth(user.two_fa_secret).verify_code(code):\n        raise HTTPException(\n            status_code=401,\n            detail=\"Invalid 2FA code\"\n        )\n    return {\"status\": \"verified\"}\n\n# Protected endpoint\n@app.get(\"/protected-data\")\nasync def protected_data(\n    user: User = Depends(current_active_user)\n):\n    return {\"data\": \"Sensitive information\"}\n</code></pre>"},{"location":"tutorial/example_implementation/#testing-workflow","title":"Testing Workflow","text":"<ol> <li>Start server: <code>uvicorn example_app:app --reload</code></li> <li>Register user at <code>/auth/register</code></li> <li>Login with credentials at <code>/auth/jwt/login</code></li> <li>Access <code>/setup-2fa</code> to get QR code</li> <li>Scan code in authenticator app</li> <li>Access protected routes with valid code</li> </ol>"},{"location":"tutorial/example_implementation/#notes","title":"Notes","text":"<ul> <li>Please, refer to the Example FastAPI Application for a more complete example implementation.</li> </ul>"},{"location":"tutorial/first-steps/","title":"Getting Started with 2FA","text":"<ol> <li> <p>Install Package <pre><code>pip install two-fast-auth\n</code></pre></p> </li> <li> <p>Add Middleware <pre><code>from two_fast_auth import TwoFactorMiddleware\n\napp.add_middleware(\n    TwoFactorMiddleware,\n    get_user_secret_callback=get_user_secret,\n    excluded_paths=[\"/setup-2fa\"]\n)\n</code></pre></p> </li> <li> <p>Create Setup Endpoint <pre><code>from two_fast_auth import TwoFactorAuth\n\n@app.post(\"/setup-2fa\")\nasync def setup_2fa(user: User = Depends(current_user)):\n    tfa = TwoFactorAuth()\n    return {\n        \"qr_code\": tfa.generate_qr_code(user.email),\n        \"secret\": tfa.secret\n    }\n</code></pre></p> </li> <li> <p>Implement Verification <pre><code>@app.post(\"/verify-2fa\")\nasync def verify_2fa(code: str, user: User = Depends(current_user)):\n    if not TwoFactorAuth(user.two_fa_secret).verify_code(code):\n        raise HTTPException(400, \"Invalid code\")\n    return {\"status\": \"verified\"}\n</code></pre></p> </li> </ol>"},{"location":"tutorial/two-factor-auth/","title":"Implementing TwoFactorAuth","text":""},{"location":"tutorial/two-factor-auth/#qr-code-generation","title":"QR Code Generation","text":"<pre><code>from two_fast_auth import TwoFactorAuth\nfrom fastapi.responses import StreamingResponse\n\n@app.post(\"/setup-2fa\")\nasync def setup_2fa(\n    user: User = Depends(current_active_user)\n):\n    tfa = TwoFactorAuth(\n        issuer_name=\"MyApp\",\n        qr_fill_color=\"#4a86e8\"\n    )\n    qr_code = tfa.generate_qr_code(user.email)\n\n    # Store secret in database\n    user.two_fa_secret = tfa.secret\n    await user.save()\n\n    return StreamingResponse(qr_code, media_type=\"image/png\")\n</code></pre>"},{"location":"tutorial/two-factor-auth/#code-verification","title":"Code Verification","text":"<pre><code>@app.post(\"/verify-2fa\")\nasync def verify_2fa(\n    code: str = Form(...),\n    user: User = Depends(current_active_user)\n):\n    if not user.two_fa_secret:\n        raise HTTPException(\n            status_code=400,\n            detail=\"2FA not configured\"\n        )\n\n    tfa = TwoFactorAuth(user.two_fa_secret)\n    if tfa.verify_code(code):\n        return {\n            \"status\": \"2FA verified\"\n        }\n    raise HTTPException(\n        status_code=401,\n        detail=\"Invalid code\"\n    )\n</code></pre>"},{"location":"tutorial/two-factor-auth/#recovery-code-management","title":"Recovery Code Management","text":"<pre><code>@app.post(\"/generate-recovery-codes\")\nasync def generate_recovery_codes(\n    user: User = Depends(current_active_user)\n):\n    codes = TwoFactorAuth.generate_recovery_codes(\n        count=10,\n        code_length=8\n    )\n    user.recovery_codes = codes\n    await user.save()\n    return {\"recovery_codes\": codes}\n</code></pre>"},{"location":"tutorial/two-factor-middleware/","title":"Implementing TwoFactorMiddleware","text":""},{"location":"tutorial/two-factor-middleware/#basic-configuration","title":"Basic Configuration","text":"<pre><code>from two_fast_auth import TwoFactorMiddleware\n\nasync def get_user_secret(\n    user_id: str\n) -&gt; Optional[str]:\n    async with AsyncSession() as session:\n        user = await session.get(\n            User,\n            user_id\n        )\n        return user.two_fa_secret if user else None\n\napp.add_middleware(\n    TwoFactorMiddleware,\n    get_user_secret_callback=get_user_secret,\n    excluded_paths=[\n        \"/docs\",\n        \"/openapi.json\",\n        \"/auth/jwt/login\",\n        \"/setup-2fa\"\n    ],\n    header_name=\"X-2FA-Code\"\n)\n</code></pre>"},{"location":"tutorial/two-factor-middleware/#handling-exceptions","title":"Handling Exceptions","text":"<pre><code>@app.exception_handler(HTTPException)\nasync def two_fa_exception_handler(\n    request: Request,\n    exc: HTTPException\n):\n    if exc.status_code == 401:\n        return JSONResponse(\n            status_code=401,\n            content={\n                \"detail\": \"2FA verification required\"\n            }\n        )\n    return await http_exception_handler(request, exc)\n</code></pre>"},{"location":"tutorial/two-factor-middleware/#testing-middleware","title":"Testing Middleware","text":"<pre><code>def test_2fa_protected_route():\n    # Valid request\n    response = client.get(\n        \"/protected\",\n        headers={\"X-2FA-Code\": \"123456\"}\n    )\n    assert response.status_code == 200\n\n    # Missing 2FA header\n    response = client.get(\"/protected\")\n    assert response.status_code == 401\n</code></pre>"}]}